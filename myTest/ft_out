[1;33m  ==============================
||            VECTOR            ||
  ==============================[0m
-----VECTOR CONSTRUCTORS, SIZE AND CAPACITY-----
v contains: 5 5 5
v size: 3
v4 contains: 5 5
v4 size: 2
, cap: 3

-----TRY TO RESIZE WITH MAX_SIZE-----
std::bad_alloc
v contains: 5 5 5
v size: 3

-----RESIZE TO 8-----
v contains: 5 5 5 0 0 0 0 0
v size: 8

-----TRY TO RESIZE TO -1 (LENGTH ERROR)-----
vector
v contains: 5 5 5 0 0 0 0 0
v size: 8

-----RESIZE TO 4-----
v contains: 5 5 5 0
v size: 4

-----ASSIGN-----
v contains: 9 8 7 6 5 4 3 2 1
v size: 9
v contains: 5 5 5 5
v size: 4

-----PUSH_BACK-----
v contains: 5 5 5 5 10
v size: 5

-----RESIZE TO CAPACITY + PUSH_BACK-----
v contains: 5 5 5 5 10 11 11 11 11 15
v size: 10

-----POP_BACK-----
v contains: 5 5 5 5 10 11 11 11 11
v size: 9

-----INSERT SINGLE VALUE-----
v contains: 5 5 97 5 5 10 11 11 11 11
v size: 10
v contains: 5 5 97 5 5 10 11 11 11 11 50
v size: 11

-----INSERT SEVERAL VALUES-----
v contains: 5 5 97 1 1 1 1 1 5 5 10 11 11 11 11 50
v size: 16

-----INSERT ITERATOR RANGE-----
v contains: 5 5 97 1 1 1 1 1 5 5 10 11 11 11 11 3 2 1 50
v size: 19

-----ERASE SINGLE VALUE-----
erase ret: 97
v contains: 5 97 1 1 1 1 1 5 5 10 11 11 11 11 3 2 1 50
v size: 18

-----ERASE RANGE-----
ret es end()
erase ret: 1
v contains: 5 97 1
v size: 3

-----SWAP-----
v contains: 5 5
v size: 2
v4 contains: 5 97 1
v4 size: 3

-----CLEAR-----
v4 contains:
v4 size: 0

-----SWAP (non-member overload)-----
v contains:
v size: 0
v4 contains: 5 5
v4 size: 2

-----RELATIONAL OPERATORS-----
v == v4? 0
v == std::vector()? 1
v == v4? 0
v != v4? 1
v < v4? 1
v <= v4? 1
v > v4? 0
v >= v4? 0
v contains: 5 0
v size: 2
v4 contains: 5 5
v4 size: 2

-----EQUAL-----
v equal v4? 0

-----LEXICOGRAPHICAL_COMPARE-----
v < v4? 1
v4 < v? 0
v < v4? (comp) 1
v4 < v? (comp) 0

-----ELEMENT ACCESS-----
v[1]: 0
v.at(1): 0
v.front(): 5
v.back(): 0
v.at(2): vector

-----REVERSE ITERATOR-----
v contains: 5 0 10 15 20
v size: 5
v contains (rev order): 20 15 10 0 5
*rev_it: 20
*rev_it2: 19
*rev_it: 19
*rev_it2: 15
v contains (rev order, iterating from rev_it2):  15 10 0 5
v contains (rev order, iterating with const_it):  19 15 10 0 5
*(rev_it + 2): 10
*rev_it++: 19
*rev_it: 15
*++rev_it: 10
*(rev_it - 2): 19
*--rev_it: 15
*(rev_it -= 1): 19
rev_it[2]: 10
*(4 + rev_it): 5
rev_it - (rev_it2 + 3): -4
(rev_it2 + 3) - rev_it: 4
rev_it == rev_it2? 0
rev_it <= rev_it2? 1
rev_it >= rev_it2? 0
rev_it2 > rev_it? 1

-----CONST ITERATOR TESTS-----
should not compile


[1;33m  ==============================
||            STACK             ||
  ==============================[0m
s empty: 1
s size: 0
pushing...
s empty: 0
s top: 2
pushing...
s top: 4
s size: 2
popping...
s top: 2
s size: 1
s == s1? 1
s != s1? 0
s < s1? 0
s <= s1? 1
s > s1? 0
s >= s1? 1


[1;33m  ==============================
||              MAP             ||
  ==============================[0m

-----PAIR-----
pair.first, pair.second: 1, hola

-----MAP INSERT-----
m contains: 
	KEY	ELEMENT
	1	hola
	2	que
	3	bien
	4	tal
m size: 4

-----MAP RANGE CONSTRUCTOR-----
map contains: 
	KEY	ELEMENT
	1	hola
	2	que
map size: 2
m2 contains: 
	KEY	ELEMENT
	42	a
	43	b
	44	c
m2 size: 3

-----MAP COPY CONSTRUCTOR-----
copy contains: 
	KEY	ELEMENT
	1	hola
	2	que
	3	bien
	4	tal
copy size: 4

-----MAP RANGE INSERT-----
m contains: 
	KEY	ELEMENT
	1	hola
	2	que
	3	bien
	4	tal
m size: 4
m2 contains: 
	KEY	ELEMENT
	42	a
	43	b
	44	c
m2 size: 3

-----MAP HINT INSERT-----
m contains: 
	KEY	ELEMENT
	1	hola
	2	que
	3	bien
	4	tal
	10	hinting
m size: 5
emptyMap is empty? 1
emptyMap contains: 
	KEY	ELEMENT
	5	bbb
	8	ccc
	10	hinting
	12	ddd
	15	aaa
emptyMap size: 5

-----COUNT-----
emptyMap count of key 12: 1
emptyMap count of key 13: 0

-----LOWER/UPPER_BOUND-----
m lower_bound of key 4: 4, tal
m lower_bound of key 5: 10, hinting
m upper_bound of key 4: 10, hinting
m upper_bound of key 5: 10, hinting

-----EQUAL_RANGE-----
m equal_range of key 4: 4, tal; 

-----VALUE_COMPARE-----
comp_func(begin, pair2): true
comp_func(pair2, begin): false

-----ERASE-----
m contains: 
	KEY	ELEMENT
	1	hola
	2	que
	3	bien
	4	tal
	10	hinting
m size: 5
erasing iterator begin
erasing key 10
erasing by range, 42 to end
m contains: 
	KEY	ELEMENT
	2	que
	3	bien
	4	tal
m size: 3

-----SWAP-----
m contains: 
	KEY	ELEMENT
	5	bbb
	8	ccc
	10	hinting
	12	ddd
	15	aaa
m size: 5
emptyMap contains: 
	KEY	ELEMENT
	2	que
	3	bien
	4	tal
emptyMap size: 3

-----MAP NON-MEMBER SWAP-----
m contains: 
	KEY	ELEMENT
	2	que
	3	bien
	4	tal
m size: 3
emptyMap contains: 
	KEY	ELEMENT
	5	bbb
	8	ccc
	10	hinting
	12	ddd
	15	aaa
emptyMap size: 5

-----CLEAR-----
m contains: 
	KEY	ELEMENT
m size: 0
m contains: 
	KEY	ELEMENT
	5	que
	10	hola
	42	tal
m size: 3

-----ASSIGNMENT OPERATOR-----
m contains: 
	KEY	ELEMENT
	5	bbb
	8	ccc
	10	hinting
	12	ddd
	15	aaa
m size: 5

-----MAP OPERATOR[]-----
m[2]: 
m[42]: 
m[5]: bbb
m[15]: aaa
m contains: 
	KEY	ELEMENT
	2	
	5	bbb
	8	ccc
	10	hinting
	12	ddd
	15	aaa
	42	
m size: 7
m[42]: bye

-----REVERSE ITERATOR-----
m in reverse is:
42, bye
15, aaa
12, ddd
10, hinting
8, ccc
5, bbb
2, 
1, hello
rend--; revIt: 1, hello

-----CONST TESTS-----
constructing const from non-const map
construct non-const from const map
iterator to iterator
const_iterator to const_iterator
iterator to const_iterator
const_iterator to iterator
